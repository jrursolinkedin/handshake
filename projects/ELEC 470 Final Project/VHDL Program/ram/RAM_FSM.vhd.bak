library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity RAM_FSM is
	generic(num_dist : integer:= 9);
	port(
		clk : in std_logic;
		reset : in std_logic;
		comparator_out : in std_logic;
		write_out : out std_logic;
		read_out : out std_logic
		enable_counter : out std_logic;
		reset_counter : out std_logic
	);
end entity;

architecture behave of RAM_FSM is

	signal current_state : std_logic_vector(2 downto 0): (others=>'0');
	signal next_state : std_logic_vector(2 downto 0): (others=>'0');

begin

	process(clk, reset)
	begin
	
		if reset = '1' then
			current_state <= (others=>'0');
		elsif rising_edge(clk) then
			current_state <= next_state;
		end if;
	
	end process;
	
	
	process(current_state, comparator_out)
	begin
	
		case current_state is
			
			when "000" =>
				write_out <= '0';
				read_out <= '0';
				enable_counter <= '0';
				reset_counter <= '0';
				next_state <= '001';
			when "001" =>
				write_out <= '0';
				read_out <= '0';
				enable_counter <= '0';
				reset_counter <= '0';
				next_state <= '001';
			
			when others =>
				
			
		end case;
	
	end process;
	

	

end architecture;